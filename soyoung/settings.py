"""
Django settings for taomaomao project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7!z0^5v5d28*c)0jj7%fyci*r1y8jy$%dnlz^3qpul76rzoop='
import os
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG =True if os.name=='nt' else False
from dotenv import load_dotenv
if os.name=='nt':
    load_dotenv(os.path.join(BASE_DIR,'.develop.env'))
elif DEBUG:
    load_dotenv(os.path.join(BASE_DIR,'.staging.env'))
else:
    load_dotenv(os.path.join(BASE_DIR,'.product.env'))
ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.staticfiles',
    'django_crontab',
    'grab',
]

MIDDLEWARE = [
    #'user.jwtmiddleware.jwt',
    # 'django.middleware.security.SecurityMiddleware',
    # 'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'soyoung.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'soyoung.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DBNAME'),
        'HOST': os.getenv('DBURL'),
        'PORT': int(os.getenv('DBPORT')),
        'USER':os.getenv('DBUSER'),
        'PASSWORD': os.getenv('DBPWD'),
        'CONN_MAX_AGE': 1800,
        'OPTIONS': {'charset':'utf8mb4',
                    "init_command": "SET foreign_key_checks = 0;",
                    },

    },
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/
LANGUAGE_CODE='zh-hans'
TIME_ZONE =  'Asia/Shanghai'


USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/assets/'
STATICFILES_DIRS=[
    os.path.join(BASE_DIR,'assets'),
]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRONJOBS = [
    ('*/10 * * * *', 'grab.cron_task.task_checkdiary'),
('*/10 * * * *', 'grab.cron_task.task_checkuser'),
('*/10 * * * *', 'grab.cron_task.task_checkproduct'),
('*/10 * * * *', 'grab.cron_task.task_checkhospital'),
('*/10 * * * *', 'grab.cron_task.task_checkdoctor'),
('*/20 * * * *', 'grab.getdiaryindexfeed.grab'),
('*/20 * * * *', 'grab.gethospital.grab'),
('*/20 * * * *', 'grab.getproduct.grab'),
('*/20 * * * *', 'grab.searchh.grab'),
('*/20 * * * *', 'grab.searchp.grab'),
('0 */5 * * *', 'grab.update.updatedb'),
]
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.getenv('REDISURL'),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
            "PASSWORD": os.getenv('REDISPASSWORD'),
        }
    }
}

CACHE_HERD_TIMEOUT=None
if DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console':{
                'level':'DEBUG',
                'class':'logging.StreamHandler',
            },
        },
        'loggers': {
            'django.db.backends': {
                'handlers': ['console'],
                'propagate': True,
                'level':'DEBUG',
            },
        }
    }